#!/usr/bin/env python
# -*- coding: UTF-8 -*-
###############################################################################
# gpsmap.py
#
#   GPSmap gpsd simulator
#
# -----------------------------------------------------------------------------
# gpsmap - A GPSD simulator based on map positions
#   (C) 2014 Gerardo García Peña <killabytenow@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 3 of the License, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#   for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
###############################################################################

import gobject
import pygtk
pygtk.require('2.0')
import gtk
import sys
import logging
import os
import threading
import sys

import GPSd
import GPS
import MapConfig
import MapWidget
import Vect

gtk.gdk.threads_init()

class Main(object):
    mc             = None
    binpath        = None
    move_map       = None
    select_mode    = None
    last_press     = None
    statusbar      = None
    mw             = None
    gpsdthread     = None
    walking        = None
    pause_action   = None
    edit_mode      = None

    __ui_xml = ''''''

    def __init__(self):
        self.mc = MapConfig.MapConfig()
        self.select_mode = None
        self.move_map    = False
        self.walking = {
            "walking": True,
            "cnode":   None,
            "tnode":   None,
            "from":    None,
            "to":      None,
            "s":       None,
            "ts":      None,
            "pausing": False,
            "refresh": 250,
            }
        gobject.timeout_add(self.walking["refresh"], self.route_walk)

        ## BUILD INTERFACE ##
        # create window and set some properties
        self.binpath = os.path.dirname(sys.argv[0])
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.title()
        self.window.set_border_width(3)

        # load icons
        icon_fact = gtk.IconFactory()
        for name, filename in {
                                "print-kml" : "kml.png",
                                "locked"    : "locked.png",
                                "edit"      : "edit.png",
                                "ruler"     : "ruler.png",
                              }.iteritems():
            icon_set = gtk.IconSet(gtk.gdk.pixbuf_new_from_file(
								os.path.join(self.binpath, "resources", "icons", filename)))
            icon_fact.add(name, icon_set)
        icon_fact.add_default()

        self.mw = MapWidget.MapWidget(self.mc)

        # create the UI Manager
        ui_manager = gtk.UIManager()

        # create actions
        action_group = gtk.ActionGroup('GPSmap')
        action_group.add_actions(
            [('file.quit',          gtk.STOCK_QUIT,       '_Quit me!',          None,         'Quit the Program', self.quit),
             ('file',               None,                 '_File'),
             ('file.new',           gtk.STOCK_NEW,        '_New map',           '<Control>n', None,               self.new),
             ('file.open',          gtk.STOCK_OPEN,       '_Open map',          '<Control>o', None,               self.open_dialog),
             ('file.save',          gtk.STOCK_SAVE,       '_Save map',          '<Control>s', None,               self.save),
             ('file.save_route',    "print-kml",          '_Save KML route',    None,         None,               self.route_save_kml),
             ('file.mapshot',       "mapshot",            '_Save map shot',     None,         None,               self.save_mapshot),
             ('edit',               None,                 '_Edit'),
             ('edit.map_load',      None,                 '_Load map image',    None,         None,               self.map_load_dialog),
             ('edit.route_unset',   None,                 '_Reset route',       None,         None,               self.route_unset),
             ('edit.add_point',     None,                 'Add _point',         None,         None,               self.set_ref_P),
             ('edit.wspeed',        None,                 'Set _walking speed', None,         None,               self.set_walk_speed_dialog),
             ('refp',               None,                 '_Reference points'), 
             ('refp.set_ref_A',     None,                 'Set reference _A',   None,         None,               self.set_ref_A),
             ('refp.set_ref_H',     None,                 'Set reference _H',   None,         None,               self.set_ref_H),
             ('refp.set_ref_V',     None,                 'Set reference _V',   None,         None,               self.set_ref_V),
             ('anim',               None,                 '_Animate'),
             ('anim.start',         gtk.STOCK_MEDIA_PLAY, '_Start',             None,         None,               self.route_walk_start),
             ('help',               None,                 '_Help'),
             ('help.about',         None,                 '_About',             None,         None,               self.about),
             ('view',               None,                 '_View'),
            ])
        self.edit_mode = 0
        action_group.add_radio_actions([
                ("edit.mode_none",  "locked", "No editing", None, None, 0),
                ("edit.mode_route", "edit",   "Edit route", None, None, 1),
                ("edit.mode_ruler", "ruler",  "Ruler mode", None, None, 2),
            ], 0, self.set_edit_mode)
        action_group.add_radio_actions([
                ("view.bg_off",    None, "Background off",    None, None, 0),
                ("view.bg_dimmed", None, "Background dimmed", None, None, 1),
                ("view.bg_on",     None, "Background on",     None, None, 2),
            ], 2, self.mw.bg_visible)
        for ta in [
                    [ "ref_points", "_Reference points" ],
                    [ "route",      "Rou_te"            ],
                    [ "points",     "_Points"           ],
                  ]:
            a = gtk.ToggleAction("view.%s" % ta[0], ta[1], None, None)
            a.connect("toggled", self.mw.is_visible, ta[0])
            a.set_active(True)
            action_group.add_action(a)
        self.pause_action = gtk.ToggleAction("anim.pause", "_Pause", None, gtk.STOCK_MEDIA_PAUSE)
        self.pause_action.connect("toggled", self.route_pause_toggle)
        self.pause_action.set_active(False)
        action_group.add_action_with_accel(self.pause_action, "Return")
        a = gtk.ToggleAction("anim.pausing", "Pause at chec_kpoints", None, None)
        a.connect("toggled", self.route_is_pausing)
        a.set_active(True)
        action_group.add_action(a)

        ui_manager.insert_action_group(action_group, 0)

        # create menu and accelerator group
        ui_manager.add_ui_from_file(os.path.join(self.binpath, "resources", "ui", "main-menu.xml"))
        ui_manager.add_ui_from_file(os.path.join(self.binpath, "resources", "ui", "context-menu.xml"))
        self.__w_mapmenu = ui_manager.get_widget("/mapmenu")
        menubar = ui_manager.get_widget("/menubar")

        # configure accelerators
        accel_group = ui_manager.get_accel_group()
        self.window.add_accel_group(accel_group)

        ## More things you need an X window for ...
        #event_box.realize()
        #event_box.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))

        ## Set background color to green
        #event_box.modify_bg(gtk.STATE_NORMAL,
        #event_box.get_colormap().alloc_color("green"))

        self.__w_sw = gtk.ScrolledWindow()
        self.__w_sw.add_with_viewport(self.mw)

        toolbar = ui_manager.get_widget("/toolbar")
        toolbar.set_can_focus(False)
        toolbar.set_can_default(False)
        toolbar.foreach(lambda x: x.set_focus_chain([]))

        # create status bar
        self.statusbar = gtk.Statusbar()

        # fill window
        vbox = gtk.VBox(False, 1)
        vbox.pack_start(menubar, False, True, 0)
        vbox.pack_start(toolbar, False, False, 0)
        vbox.pack_start(self.__w_sw, True, True, 0)
        vbox.pack_end(self.statusbar, False, True, 0)
        self.window.add(vbox)

        # events
        self.mw.add_events(gtk.gdk.EXPOSURE_MASK
                              | gtk.gdk.LEAVE_NOTIFY_MASK
                              | gtk.gdk.BUTTON_PRESS_MASK
                              | gtk.gdk.BUTTON_RELEASE_MASK
                              | gtk.gdk.POINTER_MOTION_MASK
                              | gtk.gdk.POINTER_MOTION_HINT_MASK)

        self.mw.connect("button_press_event",   self.map_button_press)
        self.mw.connect("button_release_event", self.map_button_release)
        self.mw.connect("motion-notify-event",  self.map_motion_notify)

        self.window.connect("key-press-event",   self.map_key_press)
        self.window.connect("key-release-event", self.map_key_release)
        self.window.connect("delete_event",      self.quit)
        self.window.connect("destroy",           self.destroy)

        self.window.show_all()
        self.mw.grab_focus()

        # say hello
        self.status("GPSmap alpha started")

    # -------------------------------------------------------------------------
    # manage window properties
    # -------------------------------------------------------------------------

    def set_edit_mode(self, action, value):
        self.edit_mode = value.get_current_value()

    def title(self, fname = None):
        t = "gpsmap"
        if fname is not None and fname != "":
            t = "%s [%s]" % (t, fname)
        self.window.set_title(t)
        return t

    def status(self, msg = None):
        if self.statusbar is not None:
            cx = self.statusbar.get_context_id("status")
            self.statusbar.pop(cx)
            if msg is not None and msg != "":
                self.statusbar.push(cx, msg)
        if msg is not None and msg != "":
            logging.info("STATUS: %s" % msg)


    def responseToDialog(self, entry, dialog, response):
        dialog.response(response)

    def getText(self, title, msg, label, value = None):
        #base this on a message dialog
        dialog = gtk.MessageDialog(
                            None,
                            gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                            gtk.MESSAGE_QUESTION,
                            gtk.BUTTONS_OK_CANCEL,
                            None)
        dialog.set_markup(title)

        # fill dialog
        entry = gtk.Entry()
        entry.connect("activate", self.responseToDialog, dialog, gtk.RESPONSE_OK)
        hbox = gtk.HBox()
        hbox.pack_start(gtk.Label("%s:" % label), False, 5, 5)
        hbox.pack_end(entry)
        if msg is not None:
            dialog.format_secondary_markup(msg)
        dialog.vbox.pack_end(hbox, True, True, 0)
        dialog.show_all()
        #go go go
        if value is not None:
            entry.set_text(value)
        r = dialog.run()
        if r == gtk.RESPONSE_OK:
            text = entry.get_text()
        else:
            text = None
        dialog.destroy()
        return text

    # -------------------------------------------------------------------------
    # dialogs
    # -------------------------------------------------------------------------

    def error(self, m):
        logging.error(m)
        m = gtk.MessageDialog(parent=None,
                              flags=gtk.DIALOG_MODAL,
                              type=gtk.MESSAGE_ERROR,
                              buttons=gtk.BUTTONS_CLOSE,
                              message_format=m)
        m.run()
        m.destroy()

    # -------------------------------------------------------------------------
    # events
    # -------------------------------------------------------------------------

    def destroy(self, widget, data=None):
        gtk.main_quit()

    def map_button_press(self, widget, event=None):
        if event.button == 1:
            if self.select_mode is not None:
                self.set_ref_dialog(self.select_mode, event.x, event.y)
                self.select_mode = None
                self.mw.select_mode(None)
            else:
                if self.edit_mode == 0:
                    self.set_curr_pos(event.x, event.y)
                elif self.edit_mode == 1:
                    self.route_add(event.x, event.y)
                elif self.edit_mode == 2:
                    self.mw.ruler_set_start(event.x, event.y)
                else:
                    logging.error("bad edit mode %s" % self.edit_mode)

        if event.button == 3:
            self.move_map   = True
            self.last_press = [ event.x, event.y ]
            #self.__w_mapmenu.popup(None, None, None, event.button, event.time)


    def map_button_release(self, widget, event=None):
        if event.button == 1 and self.edit_mode == 2:
            self.mw.ruler_unset()

        if event.button == 3:
            self.move_map   = False
            self.last_press = None


    def map_motion_notify(self, widget, event=None):
        #logging.info("polla (%s, %s, %s)" % (self, widget, event))
        x, y = self.window.get_pointer()
        if self.move_map:
            if self.last_press is None:
                self.last_press = [ event.x, event.y ]
            ha = self.__w_sw.get_hadjustment()
            va = self.__w_sw.get_vadjustment()
            cp = [
                ha.get_value() - (event.x - self.last_press[0]),
                va.get_value() - (event.y - self.last_press[1])
            ]
            if cp[0] < ha.get_lower(): cp[0] = 0
            if cp[0] > ha.get_upper() - ha.get_page_size(): cp[0] = ha.get_upper() - ha.get_page_size()
            if cp[1] < va.get_lower(): cp[1] = 0
            if cp[1] > va.get_upper() - va.get_page_size(): cp[1] = va.get_upper() - va.get_page_size()
            ha.set_value(cp[0])
            va.set_value(cp[1])

        if self.mw.ruler is not None:
            self.mw.ruler_set_end(event.x, event.y)

        if self.select_mode is not None:
            if self.select_mode == "A" or self.select_mode == "P":
                self.mw.select_mode(self.select_mode, event.x, event.y)
            if self.select_mode == "H":
                self.mw.select_mode("H", event.x, self.mc.A[0][1])
            if self.select_mode == "V":
                self.mw.select_mode("V", self.mc.A[0][0], event.y)

    def map_key_press(self, widget, event=None):
        #logging.info("key = %d" % event.keyval)
        if event.keyval == 32 and not self.move_map:
            self.move_map   = True
            self.last_press = None
        if event.keyval == 65307: # ESC
            self.move_map    = False
            self.last_press  = None
            self.select_mode = None
            self.mw.select_mode(None)
            self.status(None)

    def map_key_release(self, widget, event=None):
        if event.keyval == 32:
            self.move_map   = False
            self.last_press = None

    # -------------------------------------------------------------------------
    # actions
    # -------------------------------------------------------------------------

    def route_pause_toggle(self, action):
        self.walking["walking"] = not self.walking["walking"]
        if not self.walking["walking"]:
            self.status("Pausing walk")
        else:
            self.status("Resuming walk")
        if self.walking["cnode"] is None:
            self.status("You need to start a walk - go to 'Animate' menu and press 'Start'.")

    def route_is_pausing(self, action):
        self.walking["pausing"] = not self.walking["pausing"]
        if self.walking["pausing"]:
            self.status("Stopping at checkpoints")
        else:
            self.status("Never stop at checkpoints")

    def route_walk(self):
        if not self.walking["walking"] \
        or self.walking["cnode"] is None \
        or self.walking["tnode"] is None:
            return True

        if self.walking["cnode"] >= self.walking["tnode"]:
            self.walking["status"] = False
            return True

        if self.walking["s"] is None:
            self.walking["from"] = self.mc.route_point_coords(self.walking["cnode"])
            self.walking["to"] = self.mc.route_point_coords(self.walking["cnode"] + 1)
            d = GPS.distance(
                    self.walking["from"][0], self.walking["from"][1],
                    self.walking["to"][0],   self.walking["to"][1])
            self.walking["ts"] = d / (float(self.mc.walk_speed) / 3600.0)
            self.walking["s"] = 0.0
            self.status("walking: %.2f meters to next point (i will need %.2f seconds at %.2f km/h)." % (d, self.walking["ts"], self.mc.walk_speed / 1000))
        else:
            self.walking["s"] = self.walking["s"] + (self.walking["refresh"] / 1000.0)

        if self.walking["s"] >= self.walking["ts"]:
            self.walking["cnode"] = self.walking["cnode"] + 1
            self.walking["s"] = None
            if self.walking["pausing"]:
                self.pause_action.set_active(True)
                self.status("AT CHECKPOINT. ROUTE PAUSED. Hit Enter to start")
            else:
                return self.route_walk()
        else:
            x1, y1 = self.mc.route_point_xy(self.walking["cnode"])
            x2, y2 = self.mc.route_point_xy(self.walking["cnode"] + 1)
            self.set_curr_pos(
                    float(x2 - x1) * self.walking["s"] / self.walking["ts"] + x1,
                    float(y2 - y1) * self.walking["s"] / self.walking["ts"] + y1)

        return True

    def route_walk_start(self, action, data = None):
        if len(self.mc.route) <= 0:
            return
        self.mc.unset_curr_pos()
        self.mw.redraw()
        self.walking["from"] = None
        self.walking["to"] = None
        self.walking["s"] = None
        self.walking["ts"] = None
        self.walking["cnode"] = 0
        self.walking["tnode"] = len(self.mc.route) - 1
        #self.pause_action.set_active(True)

    def set_curr_pos(self, x, y):
        p = self.mc.set_curr_pos(x, y)
        self.mw.redraw()

    def route_add(self, x, y):
        self.mc.route_add(x, y)
        p = self.mc.set_curr_pos(x, y)
        self.status("Added route point at (%d, %d) @ (%s)" \
                    % (x, y, GPS.dec2sex(p[0], p[1]) if p is not None else "unknown"))

    def route_unset(self, action, data = None):
        if self.mc is None or self.mc.route is None:
                self.error("Cannot do this before loading a map.")
        self.mc.route_unset()
        self.mw.redraw()

    def set_ref(self, pn, x, y, la, lo):
        self.status("Point %s (%d, %d) at coordinates (%f, %f) (%s)." % (pn, x, y, la, lo, GPS.dec2sex(la, lo)))
        if self.mc is None or self.mc.imgpath is None:
                self.error("Cannot set ref points before loading a map.")
        if pn == "H" or pn == "V":
            if self.mc.A is None:
                self.error("Cannot set ref %s before setting reference A." % pn)
                return
            if pn == "H": y = self.mc.A[0][1]
            if pn == "V": x = self.mc.A[0][0]
        if pn == "A":
            self.mc.unset_ref("H")
            self.mc.unset_ref("V")
        self.mc.set_ref(pn, x, y, la, lo)
        self.mw.redraw()

    def set_ref_dialog(self, n, x, y):
        # get coords
        if n != "P":
            c = None
            if n == "A" and self.mc.A is not None: c = GPS.dec2sex(self.mc.A[1][1], self.mc.A[1][0])
            if n == "V" and self.mc.V is not None: c = GPS.dec2sex(self.mc.V[1][1], self.mc.V[1][0])
            if n == "H" and self.mc.H is not None: c = GPS.dec2sex(self.mc.H[1][1], self.mc.H[1][0])
            r = self.getText(
                        "Set reference coordinate %s" % n,
                        "at position (%d, %d)" % (x, y),
                        "Coordinate", c)
            if r is not None:
                (a, l) = GPS.sex2dec(unicode(r, "utf-8"))
                if a is not None:
                    self.set_ref(n, x, y, a, l)
                    self.mw.redraw()
                else:
                    self.status("Bad coordinates specified.")
            else:
                self.status("Cancelled.")

        else:
            n = self.getText(
                    "Set a name for this point.",
                    "at position (%d, %d)" % (x, y),
                    "Coordinate")
            if n is not None:
                self.mc.point_add(unicode(n, "utf-8"), x, y)
            else:
                self.status("Cancelled.")
            self.mw.redraw()

    def set_select_ref(self, ref):
        if self.mc is None or self.mc.imgpath is None:
                self.error("Cannot set ref points before loading a map.")
                return
        if ref == "H" or ref == "V":
            if self.mc.A is None:
                self.error("Cannot set ref %s before setting reference A." % ref)
                return
        self.status("Select coordinate for reference point %s. Press ESC for cancelling." % ref)
        self.select_mode = ref

    def set_ref_A(self, action = None, data = None):
        self.set_select_ref("A")

    def set_ref_H(self, action = None, data = None):
        self.set_select_ref("H")

    def set_ref_V(self, action = None, data = None):
        self.set_select_ref("V")

    def set_ref_P(self, action = None, data = None):
        self.set_select_ref("P")

    def set_walk_speed_dialog(self, action, data = None):
        r = self.getText(
                "Set walking speed.",
                "Units are kilometers/hour",
                "Speed",
                str(self.mc.walk_speed / 1000.0))
        if r is not None:
            self.mc.walk_speed = float(r) * 1000.0
            self.status("Walk speed set to %.2f km/h" % (self.mc.walk_speed / 1000.0))
        else:
            self.status("Cancelled.")

    def new(self, action, data = None):
        self.status("New map")
        self.mc.reset()
        self.mw.redraw()

    def map_load(self, filename):
        self.mc.map_load(filename)
        self.status("Image '%s' loaded." % filename)

    def map_load_dialog(self, action, data = None):
        # open file chooser
        fc = gtk.FileChooserDialog(
               action=gtk.FILE_CHOOSER_ACTION_OPEN,
               buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))

        formats = [ "jpg", "png", "gif" ]
        filter = gtk.FileFilter()
        filter.set_name("Images")
        for f in formats:
            filter.add_pattern("*.%s" % f)
        fc.add_filter(filter)
        for f in formats:
            filter = gtk.FileFilter()
            filter.set_name("%s image" % f)
            filter.add_pattern("*.%s" % f)
            fc.add_filter(filter)

        r = fc.run()

        # fetch filename
        filename = None
        if r == gtk.RESPONSE_OK:
            filename = fc.get_filename()
        else:
            logging.info("File chooser window puf")

        fc.destroy()

        # load map
        if filename is None:
            logging.info("File choosed is puf puf")
            return None

        self.map_load(filename)

    def open(self, filename):
        self.mc.load(filename)
        self.mw.redraw()

    def open_dialog(self, action, data = None):
        # open save file chooser
        fc = gtk.FileChooserDialog(
               action=gtk.FILE_CHOOSER_ACTION_OPEN,
               buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name("gpsmap file")
        filter.add_pattern("*.gpsmap")
        fc.add_filter(filter)
        r = fc.run()

        # fetch filename
        filename = None
        if r == gtk.RESPONSE_OK:
            filename = fc.get_filename()
        else:
            logging.info("File chooser window puf")
        fc.destroy()
        if filename is None:
            logging.info("File choosed is puf puf")
            return None

        self.open(filename)

    def save_as(self, action, data = None):
        # open save file chooser
        fc = gtk.FileChooserDialog(
               action=gtk.FILE_CHOOSER_ACTION_SAVE,
               buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name("gpsmap file")
        filter.add_pattern("*.gpsmap")
        fc.add_filter(filter)
        r = fc.run()

        # fetch filename
        filename = None
        if r == gtk.RESPONSE_OK:
            filename = fc.get_filename()
        else:
            logging.info("File chooser window puf")
        fc.destroy()
        if filename is None:
            logging.info("File choosed is puf puf")
            return None

        # load map
        self.mc.save(filename)

    def save(self, action, data = None):
        logging.info("SAVE %s" % action)
        if self.mc.filename is None:
            return self.save_as(action, data)
        self.mc.save(self.mc.filename)

    def route_save_kml(self, action, data = None):
        # open save file chooser
        fc = gtk.FileChooserDialog(
               action=gtk.FILE_CHOOSER_ACTION_SAVE,
               buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name("KML file")
        filter.add_pattern("*.kml")
        fc.add_filter(filter)
        r = fc.run()

        # fetch filename
        filename = None
        if r == gtk.RESPONSE_OK:
            filename = fc.get_filename()
        else:
            logging.info("File chooser window puf")
        fc.destroy()
        if filename is None:
            logging.info("File choosed is puf puf")
            return None

        # load map
        self.mc.route_save_kml(filename)

    def save_mapshot(self, action, data = None):
        # open save file chooser
        fc = gtk.FileChooserDialog(
               action=gtk.FILE_CHOOSER_ACTION_SAVE,
               buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name("PNG file")
        filter.add_pattern("*.png")
        fc.add_filter(filter)
        r = fc.run()

        # fetch filename
        filename = None
        if r == gtk.RESPONSE_OK:
            filename = fc.get_filename()
        else:
            logging.info("File chooser window puf")
        fc.destroy()
        if filename is None:
            logging.info("File choosed is puf puf")
            return None

        # load map
        self.mw.save_png(filename)

    def start(self):
        self.gpsdthread = GPSd.GPSdThread(self.mc)
        self.gpsdthread.start()
        gtk.main()
        self.gpsdthread.quit = True


    def quit(self, action, data = None):
        self.gpsdthread.quit = True
        gtk.main_quit()

    def about(self, action):
        about = gtk.AboutDialog()
        about.set_program_name("GPSmap Emulator")
        about.set_version("1.0")
        about.set_copyright("(c) 2014 Gerardo García Peña")
        about.set_comments("GPSmap Emulator")
        about.set_logo(gtk.gdk.pixbuf_new_from_file(os.path.join(self.binpath, "resources", "logo.jpg")))
        about.run()
        about.destroy()

# start
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)
logging.info("== STARTING ===================================================================")

mwindow = Main()
if len(sys.argv) > 1:
    mwindow.open(sys.argv[1])
mwindow.start()

logging.info("== FINISHED ===================================================================")
sys.exit(0)
